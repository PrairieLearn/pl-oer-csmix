from data_constraints_generator import DataConstraintGenerator

import argparse
import os
import random

DATA_SETUP_JS_PATH = '/grade/tests/setup-data.js'
DATA_CBTF_SETUP_JS_PATH = '/grade/tests/setup-data-cbtf.js'
DATA_PRACTICE_CBTF_SETUP_JS_PATH = '/grade/tests/setup-practice-data-cbtf.js'
DATA_COURSE_LIST_FILE = "course_list.txt"


# Make sure to add in operations to clear out previous data for each data collection creation function
class MongodbDataInjector:

    def inject_mongodb_data(self, filename):
        # # We need to clear off the database and make it a clean state before each data injection
        # MONGO_REMOVE_DATA_COMMAND = 'mongo --quiet --eval "db.getCollectionNames().forEach(function(cn){db[cn].remove({})});"'
        # os.system(MONGO_REMOVE_DATA_COMMAND)
        # # os.system('mongo show collections')
        # print("......REMOVING database data before new generated data Injection ...")
        # os.system('cat /grade/tests/setup-data.js')
        # os.system('ls /grade/tests/')
        os.system("mongo --quiet " + filename)
        os.system('echo "Injected Data into MongoDB Database"')


class MongoDataGenerator(MongodbDataInjector):

    popular_first_names = ["Alise", "Bobby", "Charles", "Dalg", "Emmy",
                           "Fresica", "Gloria", "Hieh", "Idnia", "Jackman",
                           "Kevin", "Scarlett", "Cassy", "Olivia", "Patrick"]

    popular_last_names = ["Amber", "Bert", "Chaw", "Dale", "Emert",
                          "Folk", "Gusk", "Hink", "Indi", "Joey",
                          "Rice", "Tan", "Woo", "Lim", "Pratt"]

    popular_viewer_first_names = ["James", "John", "Robert", "Michael", "William", "David", "Richard", "Charles", "Joseph", "Thomas", "Mary", "Patricia", "Linda", "Barbara", "Elizabeth", "Jennifer", "Maria", "Susan", "Margaret", "Dorothy"]

    popular_viewer_last_names = ["Archer", "Baker", "Brewer", "Butcher", "Cook", "Dyer", "Farmer", "Judge", "Mason", "Page", "Potter", "Taylor", "Weaver"]

    countries = ["USA", "USA", "USA", "UK", "India", "Australia", "Mexico", "Brazil", "Brazil", "China"]

    movie_names = ["Angels & Demons", "Harry Potter", "Joker", "Watchmen", "Charlie's Angels",
                   "Shark", "Alien", "Born To Be A Winner", "Detachment", "Ironman",
                   "Sideways", "I Know What You Did Last CS411", "Lost In Translation"]

    movie_genre = ['Horror', 'Comedy', 'Romantic', 'Action']

    company_info = [['Disney', 1995, "USA"],
                    ['Disney', 1990, random.choice(countries)],
                    ['Paramount', 1995, random.choice(countries)],
                    ['Paramount', 1995, random.choice(countries)],
                    ['Fox', 2000, random.choice(countries)],
                    ['Universal Studio', 2005, random.choice(countries)],
                    ['Pixel', 2010, random.choice(countries)],
                    ['Warner Brothers', 2015, random.choice(countries)]]

    def __init__(self):
        self.actors = []
        self.movies = []
        self.directors = []

        # Data Constraint generator
        self.data_constraint_generator = DataConstraintGenerator()  # used to generate constraint data

    def set_up_actor_data(self, file):
        # Key name For Data Constraint generator
        ACTOR_ENTITY_NAME = "Actors"
        ACTOR_NAME_ATTR_FIELD = "actor_name"
        BIRTH_COUNTRY_ATTR_FIELD = "birth_country"
        seen_set = set()  # For data deduplication

        actor_data_constraint_dict_list = self.data_constraint_generator.generate_data_instances(ACTOR_ENTITY_NAME)
        constraint_index = 0

        # Must include clearing out any existing data of current collection in the mongoDB (Remember to escape line)
        file.write('db.Actors.remove({});\n')
        for actor_id in range(100, 200):
            # If there are constraint data specified by the TA's. Run it first before the default random generation
            if constraint_index < len(actor_data_constraint_dict_list):
                data_constraint_dict = actor_data_constraint_dict_list[constraint_index]

                actor_name = data_constraint_dict[ACTOR_NAME_ATTR_FIELD] \
                    if ACTOR_NAME_ATTR_FIELD in data_constraint_dict \
                    else random.choice(MongoDataGenerator.popular_first_names) + ' ' + random.choice(
                    MongoDataGenerator.popular_last_names)

                birth_country = data_constraint_dict[BIRTH_COUNTRY_ATTR_FIELD] \
                    if BIRTH_COUNTRY_ATTR_FIELD in data_constraint_dict else random.choice(MongoDataGenerator.countries)

                constraint_index += 1

                # Deduplicate same data info generated by the data constraint generator
                if (actor_name, birth_country) not in seen_set:
                    self.actors.append([actor_id, actor_name, birth_country])
                    file.write('db.Actors.insert(')
                    file.write('{actor_id: NumberInt(' + str(
                        actor_id) + '), actor_name: "' + actor_name + '", birth_country: "' + birth_country + '"}')
                    file.write(');\n')
                    seen_set.add((actor_name, birth_country))

            else:
                actor_name = random.choice(MongoDataGenerator.popular_first_names) + ' ' + random.choice(
                    MongoDataGenerator.popular_last_names)
                birth_country = random.choice(MongoDataGenerator.countries)
                # birth_year = str(random.randint(1960, 2000))

                self.actors.append([actor_id, actor_name, birth_country])
                file.write('db.Actors.insert(')
                file.write('{actor_id: NumberInt(' + str(
                    actor_id) + '), actor_name: "' + actor_name + '", birth_country: "' + birth_country + '"}')
                file.write(');\n')

    def set_up_movie_data(self, file):
        # Key name For Data Constraint generator
        MOVIE_ENTITY_NAME = "Movies"
        DIRECTOR_ATTR_FIELD = "director"
        RELEASE_YEAR_ATTR_FIELD = "release_year"
        RATINGS_ATTR_FIELD = "ratings"
        MOVIE_NAME_ATTR_FIELD = "movie_name"
        MOVIE_COUNTRY_ATTR_FIELD = "country"
        GNERE_ATTR_FIELD = "genre"
        # The following is for the embedded company attributes. TA's would need to type in the names accordingly through the csv file
        COMPANY_NAME_FIELD = "company.name"
        COMPANY_START_YEAR_FIELD = "company.start_year"
        COMPANY_COUNTRY_FIELD = "company.country"
        seen_set = set()  # For data deduplication

        movie_data_constraint_dict_list = self.data_constraint_generator.generate_data_instances(MOVIE_ENTITY_NAME)
        constraint_index = 0
        # print(movie_data_constraint_dict_list)

        file.write('db.Movies.remove({});\n')
        file.write('db.Movies1.remove({});\n') #a copy of Movies collection that will be used for testing UPDATE commands
        for movie_id in range(100, 200):
            # If there are constraint data specified by the TA's. Run it first before the default random generation
            if constraint_index < len(movie_data_constraint_dict_list):
                data_constraint_dict = movie_data_constraint_dict_list[constraint_index]

                director_name = data_constraint_dict[DIRECTOR_ATTR_FIELD] \
                    if DIRECTOR_ATTR_FIELD in data_constraint_dict \
                    else random.choice(MongoDataGenerator.popular_first_names) + ' ' + random.choice(
                    MongoDataGenerator.popular_last_names)
                release_year = data_constraint_dict[RELEASE_YEAR_ATTR_FIELD] \
                    if RELEASE_YEAR_ATTR_FIELD in data_constraint_dict \
                    else str(random.randint(1990, 2021))
                ratings = data_constraint_dict[RATINGS_ATTR_FIELD] \
                    if RATINGS_ATTR_FIELD in data_constraint_dict \
                    else str(random.randint(1, 10))
                movie_name = data_constraint_dict[MOVIE_NAME_ATTR_FIELD] \
                    if MOVIE_NAME_ATTR_FIELD in data_constraint_dict \
                    else random.choice(MongoDataGenerator.movie_names) + ' ' + str(movie_id * 2 - 3)
                movie_country = data_constraint_dict[MOVIE_COUNTRY_ATTR_FIELD] \
                    if MOVIE_COUNTRY_ATTR_FIELD in data_constraint_dict \
                    else random.choice(MongoDataGenerator.countries)
                genre = data_constraint_dict[GNERE_ATTR_FIELD] \
                    if GNERE_ATTR_FIELD in data_constraint_dict \
                    else random.choice(MongoDataGenerator.movie_genre)

                # A little bit tricky. Need to look for each individual field if been specified by TA's and put it into
                # the corresponding index of the company list, EX: ['Warner Brothers', 2015, random.choice(countries)]
                company = random.choice(MongoDataGenerator.company_info)
                if COMPANY_NAME_FIELD in data_constraint_dict:
                    company[0] = data_constraint_dict[COMPANY_NAME_FIELD]
                if COMPANY_START_YEAR_FIELD in data_constraint_dict:
                    company[1] = data_constraint_dict[COMPANY_START_YEAR_FIELD]
                if COMPANY_COUNTRY_FIELD in data_constraint_dict:
                    company[2] = data_constraint_dict[COMPANY_COUNTRY_FIELD]

                constraint_index += 1

                # Deduplicate same data info generated by the data constraint generator
                # Every movie is associated with only one genre and one director.
                if (movie_name, genre, director_name) in seen_set:
                    continue

                seen_set.add((movie_name, genre, director_name))
                self.directors.append(director_name)
                self.movies.append(movie_id)

            else:
                director_name = random.choice(MongoDataGenerator.popular_first_names) + ' ' + random.choice(
                    MongoDataGenerator.popular_last_names)
                self.directors.append(director_name)
                release_year = str(random.randint(1990, 2021))
                ratings = str(random.randint(1, 10))
                movie_name = random.choice(MongoDataGenerator.movie_names) + ' ' + str(movie_id * 2 - 3)
                movie_country = random.choice(MongoDataGenerator.countries)
                genre = random.choice(MongoDataGenerator.movie_genre)
                company = random.choice(MongoDataGenerator.company_info)
                self.movies.append(movie_id)

            # Actor name is based on the Actor collection, it would already be handled when creating Actor information
            actor_count = random.randint(3, 13)
            actor_list = []
            actor_string = '['
            for i in range(0, actor_count):
                actor = random.choice(self.actors)[0]
                if actor not in actor_list:
                    actor_list.append(actor)
                    actor_string += 'NumberInt(' + str(actor) + '), '
            actor_string = actor_string[:-2] + ']'

            file.write('db.Movies.insert(')
            file.write('{movie_id: NumberInt(' + str(
                movie_id) + '), director: "' + director_name + '", release_year: NumberInt(' + str(
                release_year) + '), ratings: NumberInt(' + str(ratings) +
                       '), movie_name: "' + movie_name + '", country: "' + movie_country + '",     genre: "' + genre + '", actors: ' + actor_string + ',company:{name:"' +
                       company[0] + '", start_year:NumberInt(' + str(company[1]) + '), country:"' + company[2] + '"}}')
            file.write(');\n')

            # A copy of Movie collection that will be used for testing update commands.
            file.write('db.Movies1.insert(')
            file.write('{movie_id: NumberInt(' + str(
            movie_id) + '), director: "' + director_name + '", release_year: NumberInt(' + str(
            release_year) + '), ratings: NumberInt(' + str(ratings) +
                   '), movie_name: "' + movie_name + '", country: "' + movie_country + '",     genre: "' + genre + '", actors: ' + actor_string + ',company:{name:"' +
                   company[0] + '", start_year:NumberInt(' + str(company[1]) + '), country:"' + company[2] + '"}}')
            file.write(');\n')

    def set_up_viewer_data(self, file):
        # Key name For Data Constraint generator
        VIEWER_ENTITY_NAME = "Viewers"
        VIEWER_NAME_ATTR_FIELD = "viewer_name"
        VIEWER_BIRTH_YEAR_ATTR_FIELD = "birth_year"
        VIEWER_JOINED_YEAR_ATTR_FIELD = "join_year"
        VIEWER_FAV_MOVIES_ATTR_FIELD = "fav_movies"
        VIEWER_FAV_DIRECTORS_ATTR_FIELD = "fav_directors"
        VIEWER_FAV_ACTORS_ATTR_FIELD = "fav_actors"
        seen_set = set()  # For data deduplication

        viewer_data_constraint_dict_list = self.data_constraint_generator.generate_data_instances(VIEWER_ENTITY_NAME)
        constraint_index = 0

        # Must include clearing out any existing data of current collection in the mongoDB (Remember to escape line)
        file.write('db.Viewers.remove({});\n')
        for viewer_id in range(300, 400):
            # If there are constraint data specified by the TA's. Run it first before the default random generation
            if constraint_index < len(viewer_data_constraint_dict_list):
                data_constraint_dict = viewer_data_constraint_dict_list[constraint_index]

                viewer_name = data_constraint_dict[VIEWER_NAME_ATTR_FIELD] \
                    if VIEWER_NAME_ATTR_FIELD in data_constraint_dict \
                    else random.choice(MongoDataGenerator.popular_viewer_first_names) + ' ' + random.choice(
                    MongoDataGenerator.popular_viewer_last_names)

                birth_year = data_constraint_dict[VIEWER_BIRTH_YEAR_ATTR_FIELD] \
                    if VIEWER_BIRTH_YEAR_ATTR_FIELD in data_constraint_dict else str(random.randint(1960, 2000))

                join_year = data_constraint_dict[VIEWER_JOINED_YEAR_ATTR_FIELD] \
                    if VIEWER_JOINED_YEAR_ATTR_FIELD in data_constraint_dict else str(int(birth_year) + random.randint(10, 25))

                constraint_index += 1

                # Deduplicate same data info generated by the data constraint generator
                if (viewer_name, birth_year) in seen_set:
                    continue

                seen_set.add((viewer_name, birth_year))

            else:
                viewer_name = random.choice(MongoDataGenerator.popular_viewer_first_names) + ' ' + random.choice(
                    MongoDataGenerator.popular_viewer_last_names)
                birth_year = str(random.randint(1960, 2000))
                join_year = str(int(birth_year) + random.randint(10, 25))

            # generating fav actors
            actor_count = random.randint(1, 15)
            actor_list = []
            actor_string = '['
            for i in range(0, actor_count):
                actor = random.choice(self.actors)[0]
                if actor not in actor_list:
                    actor_list.append(actor)
                    actor_string += 'NumberInt(' + str(actor) + '), '
            actor_string = actor_string[:-2] + ']'

            # generating fav director
            director_count = random.randint(1, 5)
            director_list = []
            director_string = '['
            for i in range(0, director_count):
                director = random.choice(self.directors)
                if director not in director_list:
                    director_list.append(director)
                    director_string += '"' + director + '", '
            director_string = director_string[:-2] + ']'

            # generating fav movie. THERE IS ONLY ONE
            movie_string = str(random.choice(self.movies))
            # movie_count = random.randint(1, 5)
            # movie_list = []
            # movie_string = '['
            # for i in range(0, movie_count):
            #     movie = random.choice(self.movies)
            #     if movie not in movie_list:
            #         movie_list.append(movie)
            #         movie_string += 'NumberInt(' + str(movie) + '), '
            # movie_string = movie_string[:-2] + ']'

            file.write('db.Viewers.insert(')
            file.write(
                '{viewer_id: NumberInt(' + str(viewer_id) + 
                '), viewer_name: "' + viewer_name + 
                '", birth_year: NumberInt(' + birth_year + 
                '), join_year: NumberInt(' + join_year + 
                '), fav_movie: NumberInt(' + movie_string + 
                '), fav_directors: ' + director_string + 
                ', fav_actors: ' + actor_string + 
                '}')
            file.write(');\n')

    def set_up_mongodb_data(self, prefix=''):
        f1 = open(prefix + DATA_SETUP_JS_PATH, 'w')
        self.set_up_actor_data(f1)
        f1.write('\n')
        self.set_up_movie_data(f1)
        f1.write('\n')
        self.set_up_viewer_data(f1)
        f1.close()


class MongoDataCBTFGenerator(MongodbDataInjector):
    popular_first_names = ["James","John","Robert","Michael","William","David","Emma","Olivia","Jennifer","Isabella","Alex","Emily","Jessica"]
    popular_last_names = ["Smith","Johnson","Williams","Brown","Jones","Smith","Wilson","Williams","Lee","Taylor"]
    popular_student_first_names = ["Alise", "Bobby", "Charles", "Dalg", "Emmy", "Fresica", "Gloria", "Hieh", "Idnia", "Jackman", "Kevin", "Scarlett", "Cassy", "Olivia", "Patrick"]
    popular_student_last_names = ["Amber", "Bert", "Chaw", "Dale", "Emert", "Folk", "Gusk", "Hink", "Indi", "Joey", "Rice", "Tan", "Woo", "Lim", "Pratt"]

    def __init__(self):
        pass

    def set_up_course_data(self, file):
        file.write('db.Courses.remove({});\n')
        file.write('db.Reviews.remove({});\n')
        file.write('db.Instructors.remove({});\n')
        file.write('db.Locations.remove({});\n')
        courseFile = open(DATA_COURSE_LIST_FILE, 'r')
        courseStrings = courseFile.readlines()

        
        instructor_list = []
        student_list = []
        location_list = []
        for instructor_id in range(90):
            instructorName = random.choice(MongoDataCBTFGenerator.popular_first_names) + ' ' + random.choice(MongoDataCBTFGenerator.popular_last_names)
            instructor = {
                "instructor_id": instructor_id,
                "name": instructorName,
                "office": random.choice(range(1000, 9999)),
                "salary": random.choice(range(95000, 115000))
            }
            instructor_list.append(instructor)
            studentName = random.choice(MongoDataCBTFGenerator.popular_student_first_names) + ' ' + random.choice(MongoDataCBTFGenerator.popular_student_last_names)
            student_list.append(studentName)
        
        for location_id in range(50):
            location = {
                "location_id": location_id,
                "capacity": random.choice(range(10, 400)),
                "num_of_window": random.choice(range(0, 20)),
                "num_of_doors": random.choice(range(1, 4))
            }
            location_list.append(location)

        # courseStrings = random.sample(courseStrings, 300)
        review_id = 0
        for course_id in range(len(courseStrings)):
            # course info
            course = str(courseStrings[course_id]).strip()
            courseInfo = course.split(",")
            department = courseInfo[2]
            course_number = courseInfo[0]
            course_name = courseInfo[1]
            year_offered = random.choice(range(2015, 2021))            

            ## student info
            # decide number of students
            studentList = random.sample(range(80), random.choice(range(3, 8)))
            studentList.sort()

            locationList = random.sample(range(50), random.choice(range(2, 5)))
            locationList.sort()

            reviewList = []

            for student_id in studentList:
                channel = random.choice(["Online", "Online", "InPerson", "InPerson", "InPerson", "InPerson", "Hybrid", "Coursera", "Edx", "PrairieLearn"])
                file.write('db.Reviews.insert(')
                file.write('{'+
                    'review_id: NumberInt(' + str(review_id) + '), ' +
                    'student_id: NumberInt(' + str(student_id) + '), ' +
                    'student_name: "' + student_list[student_id] + '", ' + 
                    'course_id: NumberInt(' + str(course_id) + '), ' +
                    'rating: NumberInt(' + str(random.choice(range(0, 10))) + '), ' +
                    'channel: "' + channel + '"}')
                file.write(');\n')
                reviewList.append(review_id)
                review_id += 1
            

            reviewString = '['
            for review in reviewList:
                reviewString += 'NumberInt(' + str(review) + '), '
            reviewString = reviewString[:-2] + ']'
            

            studentString = '['
            for student in studentList:
                studentString += 'NumberInt(' + str(student) + '), '
            studentString = studentString[:-2] + ']'

            locationString = '['
            for location in locationList:
                locationString += 'NumberInt(' + str(location) + '), '
            locationString = locationString[:-2] + ']'

            ## instructors
            instructorList = random.sample(range(80), random.choice([1,1,1,1,2,2,2,3]))
            instructorList.sort()

            instructorString = '['
            for instructor in instructorList:
                instructorString += 'NumberInt(' + str(instructor) + '), '
            instructorString = instructorString[:-2] + ']'


            file.write('db.Courses.insert(')
            file.write('{'+
                'course_id: NumberInt(' + str(course_id) + '), ' +
                'department: "' + department + '",' +
                'course_number: NumberInt(' + str(course_number) + '),' +
                'course_name: "' + course_name + '", ' +
                'year_offered: NumberInt(' + str(year_offered) + '),' +
                'instructors: ' + instructorString + ', ' +
                'reviews: ' + reviewString + ', ' +
                'locations: ' + locationString + ', ' +
                'students: ' + studentString + "}")
            file.write(');\n')
        
        for instructor in instructor_list:
            file.write('db.Instructors.insert(')
            file.write('{'+
                'instructor_id: NumberInt(' + str(instructor["instructor_id"]) + '), ' +
                'instructor_name: "' + instructor["name"] + '",' +
                'office: NumberInt(' + str(instructor["office"]) + '),' +
                'salary: NumberInt(' + str(instructor["salary"]) + ')}')
            file.write(');\n')
        
        for location in location_list:
            file.write('db.Locations.insert(')
            file.write('{'+
                'location_id: NumberInt(' + str(location["location_id"]) + '), ' +
                'capacity: NumberInt(' + str(location["capacity"]) + '),' +
                'num_of_window: NumberInt(' + str(location["num_of_window"]) + '),' +
                'num_of_doors: NumberInt(' + str(location["num_of_doors"]) + ')}')
            file.write(');\n')

        courseFile.close()

    def set_up_mongodb_cbtf_data(self, prefix=''):
        f1 = open(prefix + DATA_CBTF_SETUP_JS_PATH, 'w')
        self.set_up_course_data(f1)
        f1.close()

class MongoDataPracticeCBTFGenerator(MongodbDataInjector):
    popular_first_names = ["Alice", "Bob", "Charlie", "Doug", "Emily",
                           "Freya", "G-eazy", "Hisham", "Isabella", "Jack", "Emma",
                           "Olivia", "Ava", "Isabella", "Sophia", "Charlotte", "Mia", "Amelia",
                           "Harper", "Evelyn", "Abigail", "Emily"]

    popular_last_names = ["Anderson", "Bing", "Cho", "Da-Cruz", "Espenson",
                          "Frost", "Glow", "Hipster", "Indiana", "Joe", "White", "Harris", "Martin", "Garcia",
                          "Martinez",
                          "Robinson", "Clark",
                          "Rodriguez", "Lewis", "Walker", "Lee", "Robinson", "Clark"]

    def __init__(self):
        pass

    def set_up_lecture_data(self, file):
        file.write('db.Lectures.remove({});\n')
        lectureFile = open(DATA_COURSE_LIST_FILE, 'r')
        lectureStrings = lectureFile.readlines()
        lectureStrings = random.sample(lectureStrings, 200)
        lectureData = []
        for idx in range(len(lectureStrings)):
            lecture = str(lectureStrings[idx]).strip()
            lectureInfo = lecture.split(",")
            department = lectureInfo[2]
            number = lectureInfo[0]
            name = lectureInfo[1]
            instrcutorName = random.choice(MongoDataGenerator.popular_first_names) + ' ' + random.choice(MongoDataGenerator.popular_last_names)
            rating = random.randint(1, 10)
            lectureData.append([idx, department, number, name])
            studentNum = random.randint(5, 20)
            studentList = random.sample(range(100), studentNum)
            studentString = '['
            for student in studentList:
                studentString += 'NumberInt(' + str(student) + '), '
                # print 'CREATE(s'+str(star)+': Stars)-[:ActedIn]-(m'+str(movie_id)+':Movie)'
            studentString = studentString[:-2] + ']'

            file.write('db.Lectures.insert(')
            file.write('{lecture_id: NumberInt(' + str(idx) + '), ' +
                     'instructor: "' + instrcutorName + '", ' +
                     'lecture_number: NumberInt(' + str(number) + '),' +
                     'rating: NumberInt(' + str(rating) + '), ' +
                     'lecture_name: "' + name + '", ' +
                     'department: "' + department + '",' +
                     'students: ' + studentString + "}")
            # f1.write('{lecture,lectureInfo, department, nnumber, name,instructor, rating, lectureData, studentNum, studentList}')
            file.write(');\n')
        lectureFile.close()

    def set_up_mongodb_practice_cbtf_data(self, prefix=""):
        f1 = open(prefix + DATA_PRACTICE_CBTF_SETUP_JS_PATH, 'w')
        self.set_up_lecture_data(f1)
        f1.close()

if __name__ == "__main__":
    print("Setting up MongoDB Data ... ")
    mongodb_data_option = ["HW", "CBTF", "PracticeSBFT"]
    shell_parser = argparse.ArgumentParser(description="Generate data for MongoDB assignments or exams.")
    shell_parser.add_argument("--usage", type=int,
                              help="Input index numbers of option for MongoDB data generation. As of now, " +
                                   "0 means original HW (Movie-Actor) data set; 1 means for CBTF exam (Students-Departments) data set.")

    args = shell_parser.parse_args()
    print("Usage for option '{}' ==> Data generation for: {}".format(args.usage, mongodb_data_option[args.usage]))

    if args.usage == 0:
        data_generator = MongoDataGenerator()
        data_generator.set_up_mongodb_data(prefix = '.')
    elif args.usage == 1:
        data_generator = MongoDataCBTFGenerator()
        data_generator.set_up_mongodb_cbtf_data(prefix = '.')
    elif args.usage == 2:
        data_generator = MongoDataPracticeCBTFGenerator()
        data_generator.set_up_mongodb_practice_cbtf_data(prefix = '.')

    print("Finished Initialization of MongoDB data generation!")

    # count = 0
    # while count < 10:
    #     data_generator = MongoDataGenerator()
    #     data_generator.set_up_mongodb_data()
    #     with open(DATA_SETUP_JS_PATH, 'r') as data_file:
    #         print(data_file)
    #     count += 1


