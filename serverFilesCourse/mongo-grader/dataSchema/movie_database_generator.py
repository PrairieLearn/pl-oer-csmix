from data_constraints_generator import DataConstraintGenerator
from dataSchema.random_generator import get_random_firstNames, get_random_lastNames
import random
from os import system

class MDBMoviesGenerator():

    mdb_js_path = '/grade/tests/setup-data.js'

    countries = ["USA", "USA", "USA", "UK", "UK", "UK", "India", "Australia", "Mexico", "Brazil", "Brazil", "China"]

    movie_names = ["Angels & Demons", "Harry Potter", "Joker", "Watchmen", "Charlie's Angels",
                   "Shark", "Alien", "Born To Be A Winner", "Detachment", "Ironman",
                   "Sideways", "I Know What You Did Last CS411", "Lost In Translation"]

    movie_genre = ['Horror', 'Comedy', 'Romantic', 'Action']

    company_info = [['Disney', 1995, "USA"],
                    ['Disney', 1990, random.choice(countries)],
                    ['Paramount', 1995, random.choice(countries)],
                    ['Paramount', 1995, random.choice(countries)],
                    ['Fox', 2000, random.choice(countries)],
                    ['Universal Studio', 2005, random.choice(countries)],
                    ['Pixel', 2010, random.choice(countries)],
                    ['Warner Brothers', 2015, random.choice(countries)]]

    def __init__(self):
        self.popular_first_names = get_random_firstNames(20)
        self.popular_last_names = get_random_lastNames(20)
        self.popular_viewer_first_names = get_random_firstNames(20)
        self.popular_viewer_last_names = get_random_lastNames(20)
        self.actors = []
        self.movies = []
        self.directors = []

        # Data Constraint generator
        self.data_constraint_generator = DataConstraintGenerator()  # used to generate constraint data

    def set_up_actor_data(self, file):
        # Key name For Data Constraint generator
        ACTOR_ENTITY_NAME = "Actors"
        ACTOR_NAME_ATTR_FIELD = "actor_name"
        BIRTH_COUNTRY_ATTR_FIELD = "birth_country"
        seen_set = set()  # For data deduplication

        actor_data_constraint_dict_list = self.data_constraint_generator.generate_data_instances(ACTOR_ENTITY_NAME)
        constraint_index = 0

        # Must include clearing out any existing data of current collection in the mongoDB (Remember to escape line)
        file.write('db.Actors.remove({});\n')
        for actor_id in range(100, 200):
            # If there are constraint data specified by the TA's. Run it first before the default random generation
            if constraint_index < len(actor_data_constraint_dict_list):
                data_constraint_dict = actor_data_constraint_dict_list[constraint_index]

                actor_name = data_constraint_dict[ACTOR_NAME_ATTR_FIELD] \
                    if ACTOR_NAME_ATTR_FIELD in data_constraint_dict \
                    else random.choice(self.popular_first_names) + ' ' + random.choice(
                    self.popular_last_names)

                birth_country = data_constraint_dict[BIRTH_COUNTRY_ATTR_FIELD] \
                    if BIRTH_COUNTRY_ATTR_FIELD in data_constraint_dict else random.choice(MDBMoviesGenerator.countries)

                constraint_index += 1

                # Deduplicate same data info generated by the data constraint generator
                if (actor_name, birth_country) not in seen_set:
                    self.actors.append([actor_id, actor_name, birth_country])
                    file.write('db.Actors.insert(')
                    file.write('{actor_id: NumberInt(' + str(
                        actor_id) + '), actor_name: "' + actor_name + '", birth_country: "' + birth_country + '"}')
                    file.write(');\n')
                    seen_set.add((actor_name, birth_country))

            else:
                actor_name = random.choice(self.popular_first_names) + ' ' + random.choice(
                    self.popular_last_names)
                birth_country = random.choice(MDBMoviesGenerator.countries)
                # birth_year = str(random.randint(1960, 2000))

                self.actors.append([actor_id, actor_name, birth_country])
                file.write('db.Actors.insert(')
                file.write('{actor_id: NumberInt(' + str(
                    actor_id) + '), actor_name: "' + actor_name + '", birth_country: "' + birth_country + '"}')
                file.write(');\n')

    def set_up_movie_data(self, file):
        # Key name For Data Constraint generator
        MOVIE_ENTITY_NAME = "Movies"
        DIRECTOR_ATTR_FIELD = "director"
        RELEASE_YEAR_ATTR_FIELD = "release_year"
        RATINGS_ATTR_FIELD = "ratings"
        MOVIE_NAME_ATTR_FIELD = "movie_name"
        MOVIE_COUNTRY_ATTR_FIELD = "country"
        GNERE_ATTR_FIELD = "genre"
        # The following is for the embedded company attributes. TA's would need to type in the names accordingly through the csv file
        COMPANY_NAME_FIELD = "company.name"
        COMPANY_START_YEAR_FIELD = "company.start_year"
        COMPANY_COUNTRY_FIELD = "company.country"
        seen_set = set()  # For data deduplication

        movie_data_constraint_dict_list = self.data_constraint_generator.generate_data_instances(MOVIE_ENTITY_NAME)
        constraint_index = 0
        # print(movie_data_constraint_dict_list)

        file.write('db.Movies.remove({});\n')
        file.write('db.Movies1.remove({});\n') #a copy of Movies collection that will be used for testing UPDATE commands
        for movie_id in range(100, 200):
            # If there are constraint data specified by the TA's. Run it first before the default random generation
            if constraint_index < len(movie_data_constraint_dict_list):
                data_constraint_dict = movie_data_constraint_dict_list[constraint_index]

                director_name = data_constraint_dict[DIRECTOR_ATTR_FIELD] \
                    if DIRECTOR_ATTR_FIELD in data_constraint_dict \
                    else random.choice(self.popular_first_names) + ' ' + random.choice(
                    self.popular_last_names)
                release_year = data_constraint_dict[RELEASE_YEAR_ATTR_FIELD] \
                    if RELEASE_YEAR_ATTR_FIELD in data_constraint_dict \
                    else str(random.randint(1990, 2021))
                ratings = data_constraint_dict[RATINGS_ATTR_FIELD] \
                    if RATINGS_ATTR_FIELD in data_constraint_dict \
                    else str(random.randint(1, 10))
                movie_name = data_constraint_dict[MOVIE_NAME_ATTR_FIELD] \
                    if MOVIE_NAME_ATTR_FIELD in data_constraint_dict \
                    else random.choice(MDBMoviesGenerator.movie_names) + ' ' + str(movie_id * 2 - 3)
                movie_country = data_constraint_dict[MOVIE_COUNTRY_ATTR_FIELD] \
                    if MOVIE_COUNTRY_ATTR_FIELD in data_constraint_dict \
                    else random.choice(MDBMoviesGenerator.countries)
                genre = data_constraint_dict[GNERE_ATTR_FIELD] \
                    if GNERE_ATTR_FIELD in data_constraint_dict \
                    else random.choice(MDBMoviesGenerator.movie_genre)

                # A little bit tricky. Need to look for each individual field if been specified by TA's and put it into
                # the corresponding index of the company list, EX: ['Warner Brothers', 2015, random.choice(countries)]
                company = random.choice(MDBMoviesGenerator.company_info)
                if COMPANY_NAME_FIELD in data_constraint_dict:
                    company[0] = data_constraint_dict[COMPANY_NAME_FIELD]
                if COMPANY_START_YEAR_FIELD in data_constraint_dict:
                    company[1] = data_constraint_dict[COMPANY_START_YEAR_FIELD]
                if COMPANY_COUNTRY_FIELD in data_constraint_dict:
                    company[2] = data_constraint_dict[COMPANY_COUNTRY_FIELD]

                constraint_index += 1

                # Deduplicate same data info generated by the data constraint generator
                # Every movie is associated with only one genre and one director.
                if (movie_name, genre, director_name) in seen_set:
                    continue

                seen_set.add((movie_name, genre, director_name))
                self.directors.append(director_name)
                self.movies.append(movie_id)

            else:
                director_name = random.choice(self.popular_first_names) + ' ' + random.choice(
                    self.popular_last_names)
                self.directors.append(director_name)
                release_year = str(random.randint(1990, 2021))
                ratings = str(random.randint(1, 10))
                movie_name = random.choice(self.movie_names) + ' ' + str(movie_id * 2 - 3)
                movie_country = random.choice(self.countries)
                genre = random.choice(self.movie_genre)
                company = random.choice(self.company_info)
                self.movies.append(movie_id)

            # Actor name is based on the Actor collection, it would already be handled when creating Actor information
            actor_count = random.randint(3, 13)
            actor_list = []
            actor_string = '['
            for i in range(0, actor_count):
                actor = random.choice(self.actors)[0]
                if actor not in actor_list:
                    actor_list.append(actor)
                    actor_string += 'NumberInt(' + str(actor) + '), '
            actor_string = actor_string[:-2] + ']'

            file.write('db.Movies.insert(')
            file.write('{movie_id: NumberInt(' + str(
                movie_id) + '), director: "' + director_name + '", release_year: NumberInt(' + str(
                release_year) + '), ratings: NumberInt(' + str(ratings) +
                       '), movie_name: "' + movie_name + '", country: "' + movie_country + '",     genre: "' + genre + '", actors: ' + actor_string + ',company:{name:"' +
                       company[0] + '", start_year:NumberInt(' + str(company[1]) + '), country:"' + company[2] + '"}}')
            file.write(');\n')

            # A copy of Movie collection that will be used for testing update commands.
            file.write('db.Movies1.insert(')
            file.write('{movie_id: NumberInt(' + str(
            movie_id) + '), director: "' + director_name + '", release_year: NumberInt(' + str(
            release_year) + '), ratings: NumberInt(' + str(ratings) +
                   '), movie_name: "' + movie_name + '", country: "' + movie_country + '",     genre: "' + genre + '", actors: ' + actor_string + ',company:{name:"' +
                   company[0] + '", start_year:NumberInt(' + str(company[1]) + '), country:"' + company[2] + '"}}')
            file.write(');\n')

    def set_up_viewer_data(self, file):
        # Key name For Data Constraint generator
        VIEWER_ENTITY_NAME = "Viewers"
        VIEWER_NAME_ATTR_FIELD = "viewer_name"
        VIEWER_BIRTH_YEAR_ATTR_FIELD = "birth_year"
        VIEWER_JOINED_YEAR_ATTR_FIELD = "join_year"
        VIEWER_FAV_MOVIES_ATTR_FIELD = "fav_movies"
        VIEWER_FAV_DIRECTORS_ATTR_FIELD = "fav_directors"
        VIEWER_FAV_ACTORS_ATTR_FIELD = "fav_actors"
        seen_set = set()  # For data deduplication

        viewer_data_constraint_dict_list = self.data_constraint_generator.generate_data_instances(VIEWER_ENTITY_NAME)
        constraint_index = 0

        # Must include clearing out any existing data of current collection in the mongoDB (Remember to escape line)
        file.write('db.Viewers.remove({});\n')
        for viewer_id in range(300, 400):
            # If there are constraint data specified by the TA's. Run it first before the default random generation
            if constraint_index < len(viewer_data_constraint_dict_list):
                data_constraint_dict = viewer_data_constraint_dict_list[constraint_index]

                viewer_name = data_constraint_dict[VIEWER_NAME_ATTR_FIELD] \
                    if VIEWER_NAME_ATTR_FIELD in data_constraint_dict \
                    else random.choice(self.popular_viewer_first_names) + ' ' + random.choice(
                    self.popular_viewer_last_names)

                birth_year = data_constraint_dict[VIEWER_BIRTH_YEAR_ATTR_FIELD] \
                    if VIEWER_BIRTH_YEAR_ATTR_FIELD in data_constraint_dict else str(random.randint(1960, 2000))

                join_year = data_constraint_dict[VIEWER_JOINED_YEAR_ATTR_FIELD] \
                    if VIEWER_JOINED_YEAR_ATTR_FIELD in data_constraint_dict else str(int(birth_year) + random.randint(10, 25))

                constraint_index += 1

                # Deduplicate same data info generated by the data constraint generator
                if (viewer_name, birth_year) in seen_set:
                    continue

                seen_set.add((viewer_name, birth_year))

            else:
                viewer_name = random.choice(self.popular_viewer_first_names) + ' ' + random.choice(
                    self.popular_viewer_last_names)
                birth_year = str(random.randint(1960, 2000))
                join_year = str(int(birth_year) + random.randint(10, 25))

            # generating fav actors
            actor_count = random.randint(1, 15)
            actor_list = []
            actor_string = '['
            for i in range(0, actor_count):
                actor = random.choice(self.actors)[0]
                if actor not in actor_list:
                    actor_list.append(actor)
                    actor_string += 'NumberInt(' + str(actor) + '), '
            actor_string = actor_string[:-2] + ']'

            # generating fav director
            director_count = random.randint(1, 5)
            director_list = []
            director_string = '['
            for i in range(0, director_count):
                director = random.choice(self.directors)
                if director not in director_list:
                    director_list.append(director)
                    director_string += '"' + director + '", '
            director_string = director_string[:-2] + ']'

            # generating fav movie. THERE IS ONLY ONE
            movie_string = str(random.choice(self.movies))
            # movie_count = random.randint(1, 5)
            # movie_list = []
            # movie_string = '['
            # for i in range(0, movie_count):
            #     movie = random.choice(self.movies)
            #     if movie not in movie_list:
            #         movie_list.append(movie)
            #         movie_string += 'NumberInt(' + str(movie) + '), '
            # movie_string = movie_string[:-2] + ']'

            file.write('db.Viewers.insert(')
            file.write(
                '{viewer_id: NumberInt(' + str(viewer_id) + 
                '), viewer_name: "' + viewer_name + 
                '", birth_year: NumberInt(' + birth_year + 
                '), join_year: NumberInt(' + join_year + 
                '), fav_movie: NumberInt(' + movie_string + 
                '), fav_directors: ' + director_string + 
                ', fav_actors: ' + actor_string + 
                '}')
            file.write(');\n')

    def set_up_movie_dataset(self, prefix=''):
        f1 = open(prefix + self.mdb_js_path, 'w')
        self.set_up_actor_data(f1)
        f1.write('\n')
        self.set_up_movie_data(f1)
        f1.write('\n')
        self.set_up_viewer_data(f1)
        f1.close()

    def inject_mongodb_data(self):
        """injects generated mdb js into db"""
        system("mongo --quiet " + self.mdb_js_path)
        system('echo "Injected Data into MongoDB Database"')